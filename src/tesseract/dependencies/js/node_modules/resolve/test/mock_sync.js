var path=require("path"),test=require("tape"),resolve=require("../");test("mock",(function(t){t.plan(4);var files={};files[path.resolve("/foo/bar/baz.js")]="beep";var dirs={};function opts(basedir){return{basedir:path.resolve(basedir),isFile:function(file){return Object.prototype.hasOwnProperty.call(files,path.resolve(file))},isDirectory:function(dir){return!!dirs[path.resolve(dir)]},readFileSync:function(file){return files[path.resolve(file)]},realpathSync:function(file){return file}}}dirs[path.resolve("/foo/bar")]=!0,t.equal(resolve.sync("./baz",opts("/foo/bar")),path.resolve("/foo/bar/baz.js")),t.equal(resolve.sync("./baz.js",opts("/foo/bar")),path.resolve("/foo/bar/baz.js")),t.throws((function(){resolve.sync("baz",opts("/foo/bar"))})),t.throws((function(){resolve.sync("../baz",opts("/foo/bar"))}))})),test("mock package",(function(t){t.plan(1);var files={};files[path.resolve("/foo/node_modules/bar/baz.js")]="beep",files[path.resolve("/foo/node_modules/bar/package.json")]=JSON.stringify({main:"./baz.js"});var dirs={};function opts(basedir){return{basedir:path.resolve(basedir),isFile:function(file){return Object.prototype.hasOwnProperty.call(files,path.resolve(file))},isDirectory:function(dir){return!!dirs[path.resolve(dir)]},readFileSync:function(file){return files[path.resolve(file)]},realpathSync:function(file){return file}}}dirs[path.resolve("/foo")]=!0,dirs[path.resolve("/foo/node_modules")]=!0,t.equal(resolve.sync("bar",opts("/foo")),path.resolve("/foo/node_modules/bar/baz.js"))})),test("symlinked",(function(t){t.plan(2);var files={};files[path.resolve("/foo/bar/baz.js")]="beep",files[path.resolve("/foo/bar/symlinked/baz.js")]="beep";var dirs={};function opts(basedir){return{preserveSymlinks:!1,basedir:path.resolve(basedir),isFile:function(file){return Object.prototype.hasOwnProperty.call(files,path.resolve(file))},isDirectory:function(dir){return!!dirs[path.resolve(dir)]},readFileSync:function(file){return files[path.resolve(file)]},realpathSync:function(file){var resolved=path.resolve(file);if(resolved.indexOf("symlinked")>=0)return resolved;if(path.extname(resolved)){var dir=path.dirname(resolved),base=path.basename(resolved);return path.join(dir,"symlinked",base)}return path.join(resolved,"symlinked")}}}dirs[path.resolve("/foo/bar")]=!0,dirs[path.resolve("/foo/bar/symlinked")]=!0,t.equal(resolve.sync("./baz",opts("/foo/bar")),path.resolve("/foo/bar/symlinked/baz.js")),t.equal(resolve.sync("./baz.js",opts("/foo/bar")),path.resolve("/foo/bar/symlinked/baz.js"))})),test("readPackageSync",(function(t){t.plan(3);var files={};files[path.resolve("/foo/node_modules/bar/something-else.js")]="beep",files[path.resolve("/foo/node_modules/bar/package.json")]=JSON.stringify({main:"./baz.js"}),files[path.resolve("/foo/node_modules/bar/baz.js")]="boop";var dirs={};function opts(basedir,useReadPackage){return{basedir:path.resolve(basedir),isFile:function(file){return Object.prototype.hasOwnProperty.call(files,path.resolve(file))},isDirectory:function(dir){return!!dirs[path.resolve(dir)]},readFileSync:useReadPackage?null:function(file){return files[path.resolve(file)]},realpathSync:function(file){return file}}}dirs[path.resolve("/foo")]=!0,dirs[path.resolve("/foo/node_modules")]=!0,t.test("with readFile",(function(st){st.plan(1),st.equal(resolve.sync("bar",opts("/foo")),path.resolve("/foo/node_modules/bar/baz.js"))}));var readPackageSync=function(readFileSync,file){return file.indexOf(path.join("bar","package.json"))>=0?{main:"./something-else.js"}:JSON.parse(files[path.resolve(file)])};t.test("with readPackage",(function(st){st.plan(1);var options=opts("/foo");delete options.readFileSync,options.readPackageSync=readPackageSync,st.equal(resolve.sync("bar",options),path.resolve("/foo/node_modules/bar/something-else.js"))})),t.test("with readFile and readPackage",(function(st){st.plan(1);var options=opts("/foo");options.readPackageSync=readPackageSync,st.throws((function(){resolve.sync("bar",options)}),TypeError,"errors when both readFile and readPackage are provided")}))}));