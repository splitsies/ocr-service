var test=require("tape"),path=require("path"),parse=path.parse||require("path-parse"),keys=require("object-keys"),nodeModulesPaths=require("../lib/node-modules-paths"),verifyDirs=function(t,start,dirs,moduleDirectories,paths){var moduleDirs=[].concat(moduleDirectories||"node_modules");if(paths)for(var k=0;k<paths.length;++k)moduleDirs.push(path.basename(paths[k]));for(var foundModuleDirs={},uniqueDirs={},parsedDirs={},i=0;i<dirs.length;++i){var parsed=parse(dirs[i]);foundModuleDirs[parsed.base]||(foundModuleDirs[parsed.base]=0),foundModuleDirs[parsed.base]+=1,parsedDirs[parsed.dir]=!0,uniqueDirs[dirs[i]]=!0}t.equal(keys(parsedDirs).length>=start.split(path.sep).length,!0,'there are >= dirs than "start" has');var foundModuleDirNames=keys(foundModuleDirs);t.deepEqual(foundModuleDirNames,moduleDirs,"all desired module dirs were found"),t.equal(keys(uniqueDirs).length,dirs.length,"all dirs provided were unique");for(var counts={},j=0;j<foundModuleDirNames.length;++j)counts[foundModuleDirs[j]]=!0;t.equal(keys(counts).length,1,"all found module directories had the same count")};test("node-modules-paths",(function(t){t.test("no options",(function(t){var start=path.join(__dirname,"resolver"),dirs=nodeModulesPaths(start);verifyDirs(t,start,dirs),t.end()})),t.test("empty options",(function(t){var start=path.join(__dirname,"resolver"),dirs=nodeModulesPaths(start,{});verifyDirs(t,start,dirs),t.end()})),t.test("with paths=array option",(function(t){var start=path.join(__dirname,"resolver"),paths=["a","b"],dirs=nodeModulesPaths(start,{paths:paths});verifyDirs(t,start,dirs,null,paths),t.end()})),t.test("with paths=function option",(function(t){var paths=function(request,absoluteStart,getNodeModulesDirs,opts){return getNodeModulesDirs().concat(path.join(absoluteStart,"not node modules",request))},start=path.join(__dirname,"resolver"),dirs=nodeModulesPaths(start,{paths:paths},"pkg");verifyDirs(t,start,dirs,null,[path.join(start,"not node modules","pkg")]),t.end()})),t.test("with paths=function skipping node modules resolution",(function(t){var paths=function(request,absoluteStart,getNodeModulesDirs,opts){return[]},start=path.join(__dirname,"resolver"),dirs=nodeModulesPaths(start,{paths:paths});t.deepEqual(dirs,[],"no node_modules was computed"),t.end()})),t.test("with moduleDirectory option",(function(t){var start=path.join(__dirname,"resolver"),moduleDirectory="not node modules",dirs=nodeModulesPaths(start,{moduleDirectory:moduleDirectory});verifyDirs(t,start,dirs,moduleDirectory),t.end()})),t.test("with 1 moduleDirectory and paths options",(function(t){var start=path.join(__dirname,"resolver"),paths=["a","b"],moduleDirectory="not node modules",dirs=nodeModulesPaths(start,{paths:paths,moduleDirectory:moduleDirectory});verifyDirs(t,start,dirs,moduleDirectory,paths),t.end()})),t.test("with 1+ moduleDirectory and paths options",(function(t){var start=path.join(__dirname,"resolver"),paths=["a","b"],moduleDirectories=["not node modules","other modules"],dirs=nodeModulesPaths(start,{paths:paths,moduleDirectory:moduleDirectories});verifyDirs(t,start,dirs,moduleDirectories,paths),t.end()})),t.test("combine paths correctly on Windows",(function(t){var start="C:\\Users\\username\\myProject\\src",dirs=nodeModulesPaths(start,{paths:[],moduleDirectory:["node_modules",start]});t.equal(dirs.indexOf(path.resolve(start))>-1,!0,"should contain start dir"),t.end()})),t.test("combine paths correctly on non-Windows",{skip:"win32"===process.platform},(function(t){var start="/Users/username/git/myProject/src",dirs=nodeModulesPaths(start,{paths:[],moduleDirectory:["node_modules","/Users/username/git/myProject/src"]});t.equal(dirs.indexOf(path.resolve(start))>-1,!0,"should contain start dir"),t.end()}))}));