const usm=require("./url-state-machine");exports.implementation=class{constructor(constructorArgs){const url=constructorArgs[0],base=constructorArgs[1];let parsedBase=null;if(void 0!==base&&(parsedBase=usm.basicURLParse(base),"failure"===parsedBase))throw new TypeError("Invalid base URL");const parsedURL=usm.basicURLParse(url,{baseURL:parsedBase});if("failure"===parsedURL)throw new TypeError("Invalid URL");this._url=parsedURL}get href(){return usm.serializeURL(this._url)}set href(v){const parsedURL=usm.basicURLParse(v);if("failure"===parsedURL)throw new TypeError("Invalid URL");this._url=parsedURL}get origin(){return usm.serializeURLOrigin(this._url)}get protocol(){return this._url.scheme+":"}set protocol(v){usm.basicURLParse(v+":",{url:this._url,stateOverride:"scheme start"})}get username(){return this._url.username}set username(v){usm.cannotHaveAUsernamePasswordPort(this._url)||usm.setTheUsername(this._url,v)}get password(){return this._url.password}set password(v){usm.cannotHaveAUsernamePasswordPort(this._url)||usm.setThePassword(this._url,v)}get host(){const url=this._url;return null===url.host?"":null===url.port?usm.serializeHost(url.host):usm.serializeHost(url.host)+":"+usm.serializeInteger(url.port)}set host(v){this._url.cannotBeABaseURL||usm.basicURLParse(v,{url:this._url,stateOverride:"host"})}get hostname(){return null===this._url.host?"":usm.serializeHost(this._url.host)}set hostname(v){this._url.cannotBeABaseURL||usm.basicURLParse(v,{url:this._url,stateOverride:"hostname"})}get port(){return null===this._url.port?"":usm.serializeInteger(this._url.port)}set port(v){usm.cannotHaveAUsernamePasswordPort(this._url)||(""===v?this._url.port=null:usm.basicURLParse(v,{url:this._url,stateOverride:"port"}))}get pathname(){return this._url.cannotBeABaseURL?this._url.path[0]:0===this._url.path.length?"":"/"+this._url.path.join("/")}set pathname(v){this._url.cannotBeABaseURL||(this._url.path=[],usm.basicURLParse(v,{url:this._url,stateOverride:"path start"}))}get search(){return null===this._url.query||""===this._url.query?"":"?"+this._url.query}set search(v){const url=this._url;if(""===v)return void(url.query=null);const input="?"===v[0]?v.substring(1):v;url.query="",usm.basicURLParse(input,{url:url,stateOverride:"query"})}get hash(){return null===this._url.fragment||""===this._url.fragment?"":"#"+this._url.fragment}set hash(v){if(""===v)return void(this._url.fragment=null);const input="#"===v[0]?v.substring(1):v;this._url.fragment="",usm.basicURLParse(input,{url:this._url,stateOverride:"fragment"})}toJSON(){return this.href}};