Object.defineProperty(exports,"__esModule",{value:!0}),exports.codeFrameColumns=codeFrameColumns,exports.default=_default;var _highlight=require("@babel/highlight");let deprecationWarningShown=!1;function getDefs(chalk){return{gutter:chalk.grey,marker:chalk.red.bold,message:chalk.red.bold}}const NEWLINE=/\r\n|[\n\r\u2028\u2029]/;function getMarkerLines(loc,source,opts){const startLoc=Object.assign({column:0,line:-1},loc.start),endLoc=Object.assign({},startLoc,loc.end),{linesAbove:linesAbove=2,linesBelow:linesBelow=3}=opts||{},startLine=startLoc.line,startColumn=startLoc.column,endLine=endLoc.line,endColumn=endLoc.column;let start=Math.max(startLine-(linesAbove+1),0),end=Math.min(source.length,endLine+linesBelow);-1===startLine&&(start=0),-1===endLine&&(end=source.length);const lineDiff=endLine-startLine,markerLines={};if(lineDiff)for(let i=0;i<=lineDiff;i++){const lineNumber=i+startLine;if(startColumn)if(0===i){const sourceLength=source[lineNumber-1].length;markerLines[lineNumber]=[startColumn,sourceLength-startColumn+1]}else if(i===lineDiff)markerLines[lineNumber]=[0,endColumn];else{const sourceLength=source[lineNumber-i].length;markerLines[lineNumber]=[0,sourceLength]}else markerLines[lineNumber]=!0}else markerLines[startLine]=startColumn===endColumn?!startColumn||[startColumn,0]:[startColumn,endColumn-startColumn];return{start:start,end:end,markerLines:markerLines}}function codeFrameColumns(rawLines,loc,opts={}){const highlighted=(opts.highlightCode||opts.forceColor)&&(0,_highlight.shouldHighlight)(opts),chalk=(0,_highlight.getChalk)(opts),defs=getDefs(chalk),maybeHighlight=(chalkFn,string)=>highlighted?chalkFn(string):string,lines=rawLines.split(NEWLINE),{start:start,end:end,markerLines:markerLines}=getMarkerLines(loc,lines,opts),hasColumns=loc.start&&"number"==typeof loc.start.column,numberMaxWidth=String(end).length;let frame=(highlighted?(0,_highlight.default)(rawLines,opts):rawLines).split(NEWLINE,end).slice(start,end).map(((line,index)=>{const number=start+1+index,gutter=` ${` ${number}`.slice(-numberMaxWidth)} |`,hasMarker=markerLines[number],lastMarkerLine=!markerLines[number+1];if(hasMarker){let markerLine="";if(Array.isArray(hasMarker)){const markerSpacing=line.slice(0,Math.max(hasMarker[0]-1,0)).replace(/[^\t]/g," "),numberOfMarkers=hasMarker[1]||1;markerLine=["\n ",maybeHighlight(defs.gutter,gutter.replace(/\d/g," "))," ",markerSpacing,maybeHighlight(defs.marker,"^").repeat(numberOfMarkers)].join(""),lastMarkerLine&&opts.message&&(markerLine+=" "+maybeHighlight(defs.message,opts.message))}return[maybeHighlight(defs.marker,">"),maybeHighlight(defs.gutter,gutter),line.length>0?` ${line}`:"",markerLine].join("")}return` ${maybeHighlight(defs.gutter,gutter)}${line.length>0?` ${line}`:""}`})).join("\n");return opts.message&&!hasColumns&&(frame=`${" ".repeat(numberMaxWidth+1)}${opts.message}\n${frame}`),highlighted?chalk.reset(frame):frame}function _default(rawLines,lineNumber,colNumber,opts={}){if(!deprecationWarningShown){deprecationWarningShown=!0;const message="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(process.emitWarning)process.emitWarning(message,"DeprecationWarning");else{new Error(message).name="DeprecationWarning",console.warn(new Error(message))}}return codeFrameColumns(rawLines,{start:{column:colNumber=Math.max(colNumber,0),line:lineNumber}},opts)}