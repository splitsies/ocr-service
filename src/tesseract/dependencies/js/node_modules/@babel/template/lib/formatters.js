Object.defineProperty(exports,"__esModule",{value:!0}),exports.statements=exports.statement=exports.smart=exports.program=exports.expression=void 0;var _t=require("@babel/types");const{assertExpressionStatement:assertExpressionStatement}=_t;function makeStatementFormatter(fn){return{code:str=>`/* @babel/template */;\n${str}`,validate:()=>{},unwrap:ast=>fn(ast.program.body.slice(1))}}const smart=makeStatementFormatter((body=>body.length>1?body:body[0]));exports.smart=smart;const statements=makeStatementFormatter((body=>body));exports.statements=statements;const statement=makeStatementFormatter((body=>{if(0===body.length)throw new Error("Found nothing to return.");if(body.length>1)throw new Error("Found multiple statements but wanted one");return body[0]}));exports.statement=statement;const expression={code:str=>`(\n${str}\n)`,validate:ast=>{if(ast.program.body.length>1)throw new Error("Found multiple statements but wanted one");if(0===expression.unwrap(ast).start)throw new Error("Parse result included parens.")},unwrap:({program:program})=>{const[stmt]=program.body;return assertExpressionStatement(stmt),stmt.expression}};exports.expression=expression;const program={code:str=>str,validate:()=>{},unwrap:ast=>ast.program};exports.program=program;