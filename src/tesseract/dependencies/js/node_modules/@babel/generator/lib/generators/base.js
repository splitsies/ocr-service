function File(node){node.program&&this.print(node.program.interpreter,node),this.print(node.program,node)}function Program(node){var _node$directives;this.noIndentInnerCommentsHere(),this.printInnerComments();const directivesLen=null==(_node$directives=node.directives)?void 0:_node$directives.length;if(directivesLen){var _node$directives$trai;const newline=node.body.length?2:1;this.printSequence(node.directives,node,{trailingCommentsLineOffset:newline}),null!=(_node$directives$trai=node.directives[directivesLen-1].trailingComments)&&_node$directives$trai.length||this.newline(newline)}this.printSequence(node.body,node)}function BlockStatement(node){var _node$directives2;this.tokenChar(123);const directivesLen=null==(_node$directives2=node.directives)?void 0:_node$directives2.length;if(directivesLen){var _node$directives$trai2;const newline=node.body.length?2:1;this.printSequence(node.directives,node,{indent:!0,trailingCommentsLineOffset:newline}),null!=(_node$directives$trai2=node.directives[directivesLen-1].trailingComments)&&_node$directives$trai2.length||this.newline(newline)}this.printSequence(node.body,node,{indent:!0}),this.rightBrace(node)}function Directive(node){this.print(node.value,node),this.semicolon()}Object.defineProperty(exports,"__esModule",{value:!0}),exports.BlockStatement=BlockStatement,exports.Directive=Directive,exports.DirectiveLiteral=DirectiveLiteral,exports.File=File,exports.InterpreterDirective=InterpreterDirective,exports.Placeholder=Placeholder,exports.Program=Program;const unescapedSingleQuoteRE=/(?:^|[^\\])(?:\\\\)*'/,unescapedDoubleQuoteRE=/(?:^|[^\\])(?:\\\\)*"/;function DirectiveLiteral(node){const raw=this.getPossibleRaw(node);if(!this.format.minified&&void 0!==raw)return void this.token(raw);const{value:value}=node;if(unescapedDoubleQuoteRE.test(value)){if(unescapedSingleQuoteRE.test(value))throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");this.token(`'${value}'`)}else this.token(`"${value}"`)}function InterpreterDirective(node){this.token(`#!${node.value}`),this.newline(1,!0)}function Placeholder(node){this.token("%%"),this.print(node.name),this.token("%%"),"Statement"===node.expectedNode&&this.semicolon()}