function requeueComputedKeyAndDecorators(path){const{context:context,node:node}=path;if(node.computed&&context.maybeQueue(path.get("key")),node.decorators)for(const decorator of path.get("decorators"))context.maybeQueue(decorator)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,exports.requeueComputedKeyAndDecorators=requeueComputedKeyAndDecorators,exports.skipAllButComputedKey=function(path){path.skip(),path.node.computed&&path.context.maybeQueue(path.get("key"))};var _default={FunctionParent(path){path.isArrowFunctionExpression()||(path.skip(),path.isMethod()&&requeueComputedKeyAndDecorators(path))},Property(path){path.isObjectProperty()||(path.skip(),requeueComputedKeyAndDecorators(path))}};exports.default=_default;