Object.defineProperty(exports,"__esModule",{value:!0}),exports.isBindingIdentifier=isBindingIdentifier,exports.isBlockScoped=isBlockScoped,exports.isExistentialTypeParam=isExistentialTypeParam,exports.isExpression=isExpression,exports.isFlow=isFlow,exports.isForAwaitStatement=isForAwaitStatement,exports.isGenerated=isGenerated,exports.isNumericLiteralTypeAnnotation=isNumericLiteralTypeAnnotation,exports.isPure=isPure,exports.isReferenced=isReferenced,exports.isReferencedIdentifier=isReferencedIdentifier,exports.isReferencedMemberExpression=isReferencedMemberExpression,exports.isRestProperty=isRestProperty,exports.isScope=isScope,exports.isSpreadProperty=isSpreadProperty,exports.isStatement=isStatement,exports.isUser=isUser,exports.isVar=isVar;var _t=require("@babel/types");const{isBinding:isBinding,isBlockScoped:nodeIsBlockScoped,isExportDeclaration:isExportDeclaration,isExpression:nodeIsExpression,isFlow:nodeIsFlow,isForStatement:isForStatement,isForXStatement:isForXStatement,isIdentifier:isIdentifier,isImportDeclaration:isImportDeclaration,isImportSpecifier:isImportSpecifier,isJSXIdentifier:isJSXIdentifier,isJSXMemberExpression:isJSXMemberExpression,isMemberExpression:isMemberExpression,isRestElement:nodeIsRestElement,isReferenced:nodeIsReferenced,isScope:nodeIsScope,isStatement:nodeIsStatement,isVar:nodeIsVar,isVariableDeclaration:isVariableDeclaration,react:react,isForOfStatement:isForOfStatement}=_t,{isCompatTag:isCompatTag}=react;function isReferencedIdentifier(opts){const{node:node,parent:parent}=this;if(!isIdentifier(node,opts)&&!isJSXMemberExpression(parent,opts)){if(!isJSXIdentifier(node,opts))return!1;if(isCompatTag(node.name))return!1}return nodeIsReferenced(node,parent,this.parentPath.parent)}function isReferencedMemberExpression(){const{node:node,parent:parent}=this;return isMemberExpression(node)&&nodeIsReferenced(node,parent)}function isBindingIdentifier(){const{node:node,parent:parent}=this,grandparent=this.parentPath.parent;return isIdentifier(node)&&isBinding(node,parent,grandparent)}function isStatement(){const{node:node,parent:parent}=this;if(nodeIsStatement(node)){if(isVariableDeclaration(node)){if(isForXStatement(parent,{left:node}))return!1;if(isForStatement(parent,{init:node}))return!1}return!0}return!1}function isExpression(){return this.isIdentifier()?this.isReferencedIdentifier():nodeIsExpression(this.node)}function isScope(){return nodeIsScope(this.node,this.parent)}function isReferenced(){return nodeIsReferenced(this.node,this.parent)}function isBlockScoped(){return nodeIsBlockScoped(this.node)}function isVar(){return nodeIsVar(this.node)}function isUser(){return this.node&&!!this.node.loc}function isGenerated(){return!this.isUser()}function isPure(constantsOnly){return this.scope.isPure(this.node,constantsOnly)}function isFlow(){const{node:node}=this;return!!nodeIsFlow(node)||(isImportDeclaration(node)?"type"===node.importKind||"typeof"===node.importKind:isExportDeclaration(node)?"type"===node.exportKind:!!isImportSpecifier(node)&&("type"===node.importKind||"typeof"===node.importKind))}function isRestProperty(){return nodeIsRestElement(this.node)&&this.parentPath&&this.parentPath.isObjectPattern()}function isSpreadProperty(){return nodeIsRestElement(this.node)&&this.parentPath&&this.parentPath.isObjectExpression()}function isForAwaitStatement(){return isForOfStatement(this.node,{await:!0})}function isExistentialTypeParam(){throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.")}function isNumericLiteralTypeAnnotation(){throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.")}