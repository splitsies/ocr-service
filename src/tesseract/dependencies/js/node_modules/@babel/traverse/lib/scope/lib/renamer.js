Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperSplitExportDeclaration=require("@babel/helper-split-export-declaration"),t=require("@babel/types"),_helperEnvironmentVisitor=require("@babel/helper-environment-visitor"),_traverseNode=require("../../traverse-node"),_visitors=require("../../visitors");const renameVisitor={ReferencedIdentifier({node:node},state){node.name===state.oldName&&(node.name=state.newName)},Scope(path,state){path.scope.bindingIdentifierEquals(state.oldName,state.binding.identifier)||(path.skip(),path.isMethod()&&(0,_helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path))},"AssignmentExpression|Declaration|VariableDeclarator"(path,state){if(path.isVariableDeclaration())return;const ids=path.getOuterBindingIdentifiers();for(const name in ids)name===state.oldName&&(ids[name].name=state.newName)}};class Renamer{constructor(binding,oldName,newName){this.newName=newName,this.oldName=oldName,this.binding=binding}maybeConvertFromExportDeclaration(parentDeclar){const maybeExportDeclar=parentDeclar.parentPath;if(maybeExportDeclar.isExportDeclaration()){if(maybeExportDeclar.isExportDefaultDeclaration()){const{declaration:declaration}=maybeExportDeclar.node;if(t.isDeclaration(declaration)&&!declaration.id)return}maybeExportDeclar.isExportAllDeclaration()||(0,_helperSplitExportDeclaration.default)(maybeExportDeclar)}}maybeConvertFromClassFunctionDeclaration(path){return path}maybeConvertFromClassFunctionExpression(path){return path}rename(){const{binding:binding,oldName:oldName,newName:newName}=this,{scope:scope,path:path}=binding,parentDeclar=path.find((path=>path.isDeclaration()||path.isFunctionExpression()||path.isClassExpression()));if(parentDeclar){parentDeclar.getOuterBindingIdentifiers()[oldName]===binding.identifier&&this.maybeConvertFromExportDeclaration(parentDeclar)}const blockToTraverse=arguments[0]||scope.block;(0,_traverseNode.traverseNode)(blockToTraverse,(0,_visitors.explode)(renameVisitor),scope,this,scope.path,{discriminant:!0}),arguments[0]||(scope.removeOwnBinding(oldName),scope.bindings[newName]=binding,this.binding.identifier.name=newName),parentDeclar&&(this.maybeConvertFromClassFunctionDeclaration(path),this.maybeConvertFromClassFunctionExpression(path))}}exports.default=Renamer;