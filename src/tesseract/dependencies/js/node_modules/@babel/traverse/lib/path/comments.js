Object.defineProperty(exports,"__esModule",{value:!0}),exports.addComment=addComment,exports.addComments=addComments,exports.shareCommentsWithSiblings=shareCommentsWithSiblings;var _t=require("@babel/types");const{addComment:_addComment,addComments:_addComments}=_t;function shareCommentsWithSiblings(){if("string"==typeof this.key)return;const node=this.node;if(!node)return;const trailing=node.trailingComments,leading=node.leadingComments;if(!trailing&&!leading)return;const prev=this.getSibling(this.key-1),next=this.getSibling(this.key+1),hasPrev=Boolean(prev.node),hasNext=Boolean(next.node);hasPrev&&(leading&&prev.addComments("trailing",removeIfExisting(leading,prev.node.trailingComments)),trailing&&!hasNext&&prev.addComments("trailing",trailing)),hasNext&&(trailing&&next.addComments("leading",removeIfExisting(trailing,next.node.leadingComments)),leading&&!hasPrev&&next.addComments("leading",leading))}function removeIfExisting(list,toRemove){if(!toRemove)return list;let lastFoundIndex=-1;return list.filter((el=>{const i=toRemove.indexOf(el,lastFoundIndex);if(-1===i)return!0;lastFoundIndex=i}))}function addComment(type,content,line){_addComment(this.node,type,content,line)}function addComments(type,comments){_addComments(this.node,type,comments)}