Object.defineProperty(exports,"__esModule",{value:!0}),exports._replaceWith=_replaceWith,exports.replaceExpressionWithStatements=replaceExpressionWithStatements,exports.replaceInline=replaceInline,exports.replaceWith=replaceWith,exports.replaceWithMultiple=replaceWithMultiple,exports.replaceWithSourceString=replaceWithSourceString;var _codeFrame=require("@babel/code-frame"),_index=require("../index"),_index2=require("./index"),_cache=require("../cache"),_parser=require("@babel/parser"),_t=require("@babel/types"),_helperHoistVariables=require("@babel/helper-hoist-variables");const{FUNCTION_TYPES:FUNCTION_TYPES,arrowFunctionExpression:arrowFunctionExpression,assignmentExpression:assignmentExpression,awaitExpression:awaitExpression,blockStatement:blockStatement,callExpression:callExpression,cloneNode:cloneNode,expressionStatement:expressionStatement,identifier:identifier,inheritLeadingComments:inheritLeadingComments,inheritTrailingComments:inheritTrailingComments,inheritsComments:inheritsComments,isExpression:isExpression,isProgram:isProgram,isStatement:isStatement,removeComments:removeComments,returnStatement:returnStatement,toSequenceExpression:toSequenceExpression,validate:validate,yieldExpression:yieldExpression}=_t;function replaceWithMultiple(nodes){var _pathCache$get;this.resync(),nodes=this._verifyNodeList(nodes),inheritLeadingComments(nodes[0],this.node),inheritTrailingComments(nodes[nodes.length-1],this.node),null==(_pathCache$get=_cache.path.get(this.parent))||_pathCache$get.delete(this.node),this.node=this.container[this.key]=null;const paths=this.insertAfter(nodes);return this.node?this.requeue():this.remove(),paths}function replaceWithSourceString(replacement){let ast;this.resync();try{replacement=`(${replacement})`,ast=(0,_parser.parse)(replacement)}catch(err){const loc=err.loc;throw loc&&(err.message+=" - make sure this is an expression.\n"+(0,_codeFrame.codeFrameColumns)(replacement,{start:{line:loc.line,column:loc.column+1}}),err.code="BABEL_REPLACE_SOURCE_ERROR"),err}const expressionAST=ast.program.body[0].expression;return _index.default.removeProperties(expressionAST),this.replaceWith(expressionAST)}function replaceWith(replacementPath){if(this.resync(),this.removed)throw new Error("You can't replace this node, we've already removed it");let replacement=replacementPath instanceof _index2.default?replacementPath.node:replacementPath;if(!replacement)throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");if(this.node===replacement)return[this];if(this.isProgram()&&!isProgram(replacement))throw new Error("You can only replace a Program root node with another Program node");if(Array.isArray(replacement))throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");if("string"==typeof replacement)throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");let nodePath="";if(this.isNodeType("Statement")&&isExpression(replacement)&&(this.canHaveVariableDeclarationOrExpression()||this.canSwapBetweenExpressionAndStatement(replacement)||this.parentPath.isExportDefaultDeclaration()||(replacement=expressionStatement(replacement),nodePath="expression")),this.isNodeType("Expression")&&isStatement(replacement)&&!this.canHaveVariableDeclarationOrExpression()&&!this.canSwapBetweenExpressionAndStatement(replacement))return this.replaceExpressionWithStatements([replacement]);const oldNode=this.node;return oldNode&&(inheritsComments(replacement,oldNode),removeComments(oldNode)),this._replaceWith(replacement),this.type=replacement.type,this.setScope(),this.requeue(),[nodePath?this.get(nodePath):this]}function _replaceWith(node){var _pathCache$get2;if(!this.container)throw new ReferenceError("Container is falsy");this.inList?validate(this.parent,this.key,[node]):validate(this.parent,this.key,node),this.debug(`Replace with ${null==node?void 0:node.type}`),null==(_pathCache$get2=_cache.path.get(this.parent))||_pathCache$get2.set(node,this).delete(this.node),this.node=this.container[this.key]=node}function replaceExpressionWithStatements(nodes){this.resync();const nodesAsSequenceExpression=toSequenceExpression(nodes,this.scope);if(nodesAsSequenceExpression)return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");const functionParent=this.getFunctionParent(),isParentAsync=null==functionParent?void 0:functionParent.is("async"),isParentGenerator=null==functionParent?void 0:functionParent.is("generator"),container=arrowFunctionExpression([],blockStatement(nodes));this.replaceWith(callExpression(container,[]));const callee=this.get("callee");(0,_helperHoistVariables.default)(callee.get("body"),(id=>{this.scope.push({id:id})}),"var");const completionRecords=this.get("callee").getCompletionRecords();for(const path of completionRecords){if(!path.isExpressionStatement())continue;const loop=path.findParent((path=>path.isLoop()));if(loop){let uid=loop.getData("expressionReplacementReturnUid");uid?uid=identifier(uid.name):(uid=callee.scope.generateDeclaredUidIdentifier("ret"),callee.get("body").pushContainer("body",returnStatement(cloneNode(uid))),loop.setData("expressionReplacementReturnUid",uid)),path.get("expression").replaceWith(assignmentExpression("=",cloneNode(uid),path.node.expression))}else path.replaceWith(returnStatement(path.node.expression))}callee.arrowFunctionToExpression();const newCallee=callee,needToAwaitFunction=isParentAsync&&_index.default.hasType(this.get("callee.body").node,"AwaitExpression",FUNCTION_TYPES),needToYieldFunction=isParentGenerator&&_index.default.hasType(this.get("callee.body").node,"YieldExpression",FUNCTION_TYPES);return needToAwaitFunction&&(newCallee.set("async",!0),needToYieldFunction||this.replaceWith(awaitExpression(this.node))),needToYieldFunction&&(newCallee.set("generator",!0),this.replaceWith(yieldExpression(this.node,!0))),newCallee.get("body.body")}function replaceInline(nodes){if(this.resync(),Array.isArray(nodes)){if(Array.isArray(this.container)){nodes=this._verifyNodeList(nodes);const paths=this._containerInsertAfter(nodes);return this.remove(),paths}return this.replaceWithMultiple(nodes)}return this.replaceWith(nodes)}