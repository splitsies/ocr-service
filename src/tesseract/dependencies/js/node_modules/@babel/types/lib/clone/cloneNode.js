Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=cloneNode;var _definitions=require("../definitions"),_generated=require("../validators/generated");const has=Function.call.bind(Object.prototype.hasOwnProperty);function cloneIfNode(obj,deep,withoutLoc,commentsCache){return obj&&"string"==typeof obj.type?cloneNodeInternal(obj,deep,withoutLoc,commentsCache):obj}function cloneIfNodeOrArray(obj,deep,withoutLoc,commentsCache){return Array.isArray(obj)?obj.map((node=>cloneIfNode(node,deep,withoutLoc,commentsCache))):cloneIfNode(obj,deep,withoutLoc,commentsCache)}function cloneNode(node,deep=!0,withoutLoc=!1){return cloneNodeInternal(node,deep,withoutLoc,new Map)}function cloneNodeInternal(node,deep=!0,withoutLoc=!1,commentsCache){if(!node)return node;const{type:type}=node,newNode={type:node.type};if((0,_generated.isIdentifier)(node))newNode.name=node.name,has(node,"optional")&&"boolean"==typeof node.optional&&(newNode.optional=node.optional),has(node,"typeAnnotation")&&(newNode.typeAnnotation=deep?cloneIfNodeOrArray(node.typeAnnotation,!0,withoutLoc,commentsCache):node.typeAnnotation);else{if(!has(_definitions.NODE_FIELDS,type))throw new Error(`Unknown node type: "${type}"`);for(const field of Object.keys(_definitions.NODE_FIELDS[type]))has(node,field)&&(newNode[field]=deep?(0,_generated.isFile)(node)&&"comments"===field?maybeCloneComments(node.comments,deep,withoutLoc,commentsCache):cloneIfNodeOrArray(node[field],!0,withoutLoc,commentsCache):node[field])}return has(node,"loc")&&(newNode.loc=withoutLoc?null:node.loc),has(node,"leadingComments")&&(newNode.leadingComments=maybeCloneComments(node.leadingComments,deep,withoutLoc,commentsCache)),has(node,"innerComments")&&(newNode.innerComments=maybeCloneComments(node.innerComments,deep,withoutLoc,commentsCache)),has(node,"trailingComments")&&(newNode.trailingComments=maybeCloneComments(node.trailingComments,deep,withoutLoc,commentsCache)),has(node,"extra")&&(newNode.extra=Object.assign({},node.extra)),newNode}function maybeCloneComments(comments,deep,withoutLoc,commentsCache){return comments&&deep?comments.map((comment=>{const cache=commentsCache.get(comment);if(cache)return cache;const{type:type,value:value,loc:loc}=comment,ret={type:type,value:value,loc:loc};return withoutLoc&&(ret.loc=null),commentsCache.set(comment,ret),ret})):comments}