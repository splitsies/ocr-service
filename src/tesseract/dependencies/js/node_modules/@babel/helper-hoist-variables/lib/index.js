Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=hoistVariables;var _t=require("@babel/types");const{assignmentExpression:assignmentExpression,expressionStatement:expressionStatement,identifier:identifier}=_t,visitor={Scope(path,state){"let"===state.kind&&path.skip()},FunctionParent(path){path.skip()},VariableDeclaration(path,state){if(state.kind&&path.node.kind!==state.kind)return;const nodes=[],declarations=path.get("declarations");let firstId;for(const declar of declarations){firstId=declar.node.id,declar.node.init&&nodes.push(expressionStatement(assignmentExpression("=",declar.node.id,declar.node.init)));for(const name of Object.keys(declar.getBindingIdentifiers()))state.emit(identifier(name),name,null!==declar.node.init)}path.parentPath.isFor({left:path.node})?path.replaceWith(firstId):path.replaceWithMultiple(nodes)}};function hoistVariables(path,emit,kind="var"){path.traverse(visitor,{kind:kind,emit:emit})}