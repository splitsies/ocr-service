exports.stringToBytes=string=>[...string].map((character=>character.charCodeAt(0)));const uint8ArrayUtf8ByteString=(array,start,end)=>String.fromCharCode(...array.slice(start,end));exports.readUInt64LE=(buffer,offset=0)=>{let n=buffer[offset],mul=1,i=0;for(;++i<8;)mul*=256,n+=buffer[offset+i]*mul;return n},exports.tarHeaderChecksumMatches=buffer=>{if(buffer.length<512)return!1;const MASK_8TH_BIT=128;let sum=256,signedBitSum=0;for(let i=0;i<148;i++){const byte=buffer[i];sum+=byte,signedBitSum+=byte&MASK_8TH_BIT}for(let i=156;i<512;i++){const byte=buffer[i];sum+=byte,signedBitSum+=byte&MASK_8TH_BIT}const readSum=parseInt(uint8ArrayUtf8ByteString(buffer,148,154),8);return readSum===sum||readSum===sum-(signedBitSum<<1)},exports.multiByteIndexOf=(buffer,bytesToSearch,startAt=0)=>{if(Buffer&&Buffer.isBuffer(buffer))return buffer.indexOf(Buffer.from(bytesToSearch),startAt);const nextBytesMatch=(buffer,bytes,startIndex)=>{for(let i=1;i<bytes.length;i++)if(bytes[i]!==buffer[startIndex+i])return!1;return!0};let index=buffer.indexOf(bytesToSearch[0],startAt);for(;index>=0;){if(nextBytesMatch(buffer,bytesToSearch,index))return index;index=buffer.indexOf(bytesToSearch[0],index+1)}return-1},exports.uint8ArrayUtf8ByteString=uint8ArrayUtf8ByteString;