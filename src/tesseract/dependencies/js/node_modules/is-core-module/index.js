var has=require("has");function specifierIncluded(current,specifier){for(var nodeParts=current.split("."),parts=specifier.split(" "),op=parts.length>1?parts[0]:"=",versionParts=(parts.length>1?parts[1]:parts[0]).split("."),i=0;i<3;++i){var cur=parseInt(nodeParts[i]||0,10),ver=parseInt(versionParts[i]||0,10);if(cur!==ver)return"<"===op?cur<ver:">="===op&&cur>=ver}return">="===op}function matchesRange(current,range){var specifiers=range.split(/ ?&& ?/);if(0===specifiers.length)return!1;for(var i=0;i<specifiers.length;++i)if(!specifierIncluded(current,specifiers[i]))return!1;return!0}function versionIncluded(nodeVersion,specifierValue){if("boolean"==typeof specifierValue)return specifierValue;var current=void 0===nodeVersion?process.versions&&process.versions.node:nodeVersion;if("string"!=typeof current)throw new TypeError(void 0===nodeVersion?"Unable to determine current node version":"If provided, a valid node version is required");if(specifierValue&&"object"==typeof specifierValue){for(var i=0;i<specifierValue.length;++i)if(matchesRange(current,specifierValue[i]))return!0;return!1}return matchesRange(current,specifierValue)}var data=require("./core.json");module.exports=function(x,nodeVersion){return has(data,x)&&versionIncluded(nodeVersion,data[x])};