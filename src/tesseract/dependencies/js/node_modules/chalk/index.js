const escapeStringRegexp=require("escape-string-regexp"),ansiStyles=require("ansi-styles"),stdoutColor=require("supports-color").stdout,template=require("./templates.js"),isSimpleWindowsTerm="win32"===process.platform&&!(process.env.TERM||"").toLowerCase().startsWith("xterm"),levelMapping=["ansi","ansi","ansi256","ansi16m"],skipModels=new Set(["gray"]),styles=Object.create(null);function applyOptions(obj,options){options=options||{};const scLevel=stdoutColor?stdoutColor.level:0;obj.level=void 0===options.level?scLevel:options.level,obj.enabled="enabled"in options?options.enabled:obj.level>0}function Chalk(options){if(!this||!(this instanceof Chalk)||this.template){const chalk={};return applyOptions(chalk,options),chalk.template=function(){const args=[].slice.call(arguments);return chalkTag.apply(null,[chalk.template].concat(args))},Object.setPrototypeOf(chalk,Chalk.prototype),Object.setPrototypeOf(chalk.template,chalk),chalk.template.constructor=Chalk,chalk.template}applyOptions(this,options)}isSimpleWindowsTerm&&(ansiStyles.blue.open="[94m");for(const key of Object.keys(ansiStyles))ansiStyles[key].closeRe=new RegExp(escapeStringRegexp(ansiStyles[key].close),"g"),styles[key]={get(){const codes=ansiStyles[key];return build.call(this,this._styles?this._styles.concat(codes):[codes],this._empty,key)}};styles.visible={get(){return build.call(this,this._styles||[],!0,"visible")}},ansiStyles.color.closeRe=new RegExp(escapeStringRegexp(ansiStyles.color.close),"g");for(const model of Object.keys(ansiStyles.color.ansi))skipModels.has(model)||(styles[model]={get(){const level=this.level;return function(){const codes={open:ansiStyles.color[levelMapping[level]][model].apply(null,arguments),close:ansiStyles.color.close,closeRe:ansiStyles.color.closeRe};return build.call(this,this._styles?this._styles.concat(codes):[codes],this._empty,model)}}});ansiStyles.bgColor.closeRe=new RegExp(escapeStringRegexp(ansiStyles.bgColor.close),"g");for(const model of Object.keys(ansiStyles.bgColor.ansi)){if(skipModels.has(model))continue;styles["bg"+model[0].toUpperCase()+model.slice(1)]={get(){const level=this.level;return function(){const codes={open:ansiStyles.bgColor[levelMapping[level]][model].apply(null,arguments),close:ansiStyles.bgColor.close,closeRe:ansiStyles.bgColor.closeRe};return build.call(this,this._styles?this._styles.concat(codes):[codes],this._empty,model)}}}}const proto=Object.defineProperties((()=>{}),styles);function build(_styles,_empty,key){const builder=function(){return applyStyle.apply(builder,arguments)};builder._styles=_styles,builder._empty=_empty;const self=this;return Object.defineProperty(builder,"level",{enumerable:!0,get:()=>self.level,set(level){self.level=level}}),Object.defineProperty(builder,"enabled",{enumerable:!0,get:()=>self.enabled,set(enabled){self.enabled=enabled}}),builder.hasGrey=this.hasGrey||"gray"===key||"grey"===key,builder.__proto__=proto,builder}function applyStyle(){const args=arguments,argsLen=args.length;let str=String(arguments[0]);if(0===argsLen)return"";if(argsLen>1)for(let a=1;a<argsLen;a++)str+=" "+args[a];if(!this.enabled||this.level<=0||!str)return this._empty?"":str;const originalDim=ansiStyles.dim.open;isSimpleWindowsTerm&&this.hasGrey&&(ansiStyles.dim.open="");for(const code of this._styles.slice().reverse())str=code.open+str.replace(code.closeRe,code.open)+code.close,str=str.replace(/\r?\n/g,`${code.close}$&${code.open}`);return ansiStyles.dim.open=originalDim,str}function chalkTag(chalk,strings){if(!Array.isArray(strings))return[].slice.call(arguments,1).join(" ");const args=[].slice.call(arguments,2),parts=[strings.raw[0]];for(let i=1;i<strings.length;i++)parts.push(String(args[i-1]).replace(/[{}\\]/g,"\\$&")),parts.push(String(strings.raw[i]));return template(chalk,parts.join(""))}Object.defineProperties(Chalk.prototype,styles),module.exports=Chalk(),module.exports.supportsColor=stdoutColor,module.exports.default=module.exports;