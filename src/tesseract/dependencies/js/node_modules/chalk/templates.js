const TEMPLATE_REGEX=/(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,STYLE_REGEX=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,STRING_REGEX=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,ESCAPE_REGEX=/\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi,ESCAPES=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function unescape(c){return"u"===c[0]&&5===c.length||"x"===c[0]&&3===c.length?String.fromCharCode(parseInt(c.slice(1),16)):ESCAPES.get(c)||c}function parseArguments(name,args){const results=[],chunks=args.trim().split(/\s*,\s*/g);let matches;for(const chunk of chunks)if(isNaN(chunk)){if(!(matches=chunk.match(STRING_REGEX)))throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);results.push(matches[2].replace(ESCAPE_REGEX,((m,escape,chr)=>escape?unescape(escape):chr)))}else results.push(Number(chunk));return results}function parseStyle(style){STYLE_REGEX.lastIndex=0;const results=[];let matches;for(;null!==(matches=STYLE_REGEX.exec(style));){const name=matches[1];if(matches[2]){const args=parseArguments(name,matches[2]);results.push([name].concat(args))}else results.push([name])}return results}function buildStyle(chalk,styles){const enabled={};for(const layer of styles)for(const style of layer.styles)enabled[style[0]]=layer.inverse?null:style.slice(1);let current=chalk;for(const styleName of Object.keys(enabled))if(Array.isArray(enabled[styleName])){if(!(styleName in current))throw new Error(`Unknown Chalk style: ${styleName}`);current=enabled[styleName].length>0?current[styleName].apply(current,enabled[styleName]):current[styleName]}return current}module.exports=(chalk,tmp)=>{const styles=[],chunks=[];let chunk=[];if(tmp.replace(TEMPLATE_REGEX,((m,escapeChar,inverse,style,close,chr)=>{if(escapeChar)chunk.push(unescape(escapeChar));else if(style){const str=chunk.join("");chunk=[],chunks.push(0===styles.length?str:buildStyle(chalk,styles)(str)),styles.push({inverse:inverse,styles:parseStyle(style)})}else if(close){if(0===styles.length)throw new Error("Found extraneous } in Chalk template literal");chunks.push(buildStyle(chalk,styles)(chunk.join(""))),chunk=[],styles.pop()}else chunk.push(chr)})),chunks.push(chunk.join("")),styles.length>0){const errMsg=`Chalk template literal is missing ${styles.length} closing bracket${1===styles.length?"":"s"} (\`}\`)`;throw new Error(errMsg)}return chunks.join("")};