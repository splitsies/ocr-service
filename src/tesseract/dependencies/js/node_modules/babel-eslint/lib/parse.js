var babylonToEspree=require("./babylon-to-espree"),parse=require("@babel/parser").parse,tt=require("@babel/parser").tokTypes,traverse=require("@babel/traverse").default,codeFrameColumns=require("@babel/code-frame").codeFrameColumns;module.exports=function(code,options){const legacyDecorators=options.ecmaFeatures&&options.ecmaFeatures.legacyDecorators;var ast,opts={codeFrame:!options.hasOwnProperty("codeFrame")||options.codeFrame,sourceType:options.sourceType,allowImportExportEverywhere:options.allowImportExportEverywhere,allowReturnOutsideFunction:!0,allowSuperOutsideMethod:!0,ranges:!0,tokens:!0,plugins:[["flow",{all:!0,enums:!0}],"jsx","estree","asyncFunctions","asyncGenerators","classConstructorCall","classProperties",legacyDecorators?"decorators-legacy":["decorators",{decoratorsBeforeExport:!1}],"doExpressions","exponentiationOperator","exportDefaultFrom","exportNamespaceFrom","functionBind","functionSent","objectRestSpread","trailingFunctionCommas","dynamicImport","numericSeparator","optionalChaining","importMeta","classPrivateProperties","bigInt","optionalCatchBinding","throwExpressions",["pipelineOperator",{proposal:"minimal"}],"nullishCoalescingOperator","logicalAssignment"]};try{ast=parse(code,opts)}catch(err){throw err instanceof SyntaxError&&(err.lineNumber=err.loc.line,err.column=err.loc.column,opts.codeFrame&&(err.lineNumber=err.loc.line,err.column=err.loc.column+1,err.message="Line "+err.lineNumber+": "+err.message.replace(/ \((\d+):(\d+)\)$/,"")+"\n\n"+codeFrameColumns(code,{start:{line:err.lineNumber,column:err.column}},{highlightCode:!0}))),err}return babylonToEspree(ast,traverse,tt,code),ast};